name: CI/CD

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Create environment file
        run: echo "${{ secrets.ENV }}" | base64 -d > .env

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ secrets.DOCKER_IMAGE_TAG }}

      - name: Send docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST}}
          username: ${{ secrets.EC2_USERNAME}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          source: docker-compose.yml
          target: /home/ubuntu

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST}}
          username: ${{ secrets.EC2_USERNAME}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script: |
            echo "${{ secrets.ENV }}" | base64 -d > .env
            
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ secrets.DOCKER_IMAGE_TAG }}
            
            cd /home/ubuntu
            
            export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            export DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}
            export DOCKER_IMAGE_TAG=${{ secrets.DOCKER_IMAGE_TAG }}

            docker-compose -f docker-compose.yml down

            docker-compose -f docker-compose.yml up -d

            docker image prune -af

            docker-compose -f docker-compose.yml up -d

            docker image prune -af
